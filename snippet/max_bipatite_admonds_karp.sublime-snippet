<snippet>
	<content><![CDATA[

// https://cses.fi/problemset/task/1694/    --> ford fulkerson
// https://cses.fi/problemset/task/1696/    --> maximum bipartite matching
ll bfs(ll s,ll t,ll n,vector<vector<ll>> &adj,vector<vector<ll>> &capacity,vector<ll> &par)
{
    par=vector<ll>(n,-1);
    par[s]=-2;

    queue<pair<ll,ll>> q;
    q.push({s,INF});

    while(q.size())
    {
        ll u=q.front().first;
        ll c=q.front().second;

        q.pop();
        if(u==t)
            return c;

        for(int i=0;i<adj[u].size();i++)
        {
            if(par[adj[u][i]]==-1 && capacity[u][adj[u][i]])
            {
                par[adj[u][i]]=u;
                ll new_c=min(c,capacity[u][adj[u][i]]);

                q.push({adj[u][i],new_c});
            }
        }
    }
    return 0;
}
ll boys,girls;
ll Maxflow(ll s,ll t,ll n,vector<vector<ll>> &adj,vector<vector<ll>> &capacity)
{
    ll ans=0,newflow;
    vector<ll> par(n);

    while(newflow = bfs(s,t,n,adj,capacity,par))
    {
        ans+=newflow;

        ll cur=t;
        while(cur!=s)
        {
            capacity[par[cur]][cur]-=newflow;
            capacity[cur][par[cur]]+=newflow;
            cur=par[cur];
        }
    }
    vector<pll> v;
    cout<<ans<<endl;

    ll i,j;
    f(i,1,boys+1)
    {

        f(j,0,adj[i].size())
        {
            if(!capacity[i][adj[i][j]] && adj[i][j])
            {
                v.pb({i,adj[i][j]-boys});
                break;
            }
        }
    }

    f(i,0,v.size())
    cout<<v[i].ff<<" "<<v[i].ss<<endl;

    return ans;

}
void addedge(ll u,ll v,vector<vector<ll>> &adj,vvll &capacity)
{
    adj[u].pb(v);
    adj[v].pb(u);

    capacity[u][v]=1;
}
void solve()
{
    ll i,j,k,n,m,e;
    cin>>n>>m>>e;
    boys=n;
    girls=m;
    vector<vector<ll>> adj(n+m+2),capacity(n+m+2,vector<ll>(n+m+2,0));

    for(i=0;i<e;i++)
    {
        ll u,v,w=1;
        cin>>u>>v;

        //cout<<"0 "<<u<<" "<<n+v<<" "<<n+m+1<<endl;
        addedge(u,n+v,adj,capacity);
        addedge(0,u,adj,capacity);
        addedge(n+v,n+m+1,adj,capacity);     

    }
    Maxflow(0,n+m+1,n+m+2,adj,capacity);
    
    
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>MAX_bipartite_edmonds_karp</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
