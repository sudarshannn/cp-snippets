<snippet>
	<content><![CDATA[
struct Point
{
    ll x,y;
    Point(ll a=0,ll b=0)
    {
        x=a;
        y=b;
    }
    friend Point operator -(Point x,Point y)
    {
        return Point(x.x-y.x,x.y-y.y);
    }
    friend Point operator +(Point x,Point y)
    {
        return Point(x.x+y.x,x.y+y.y);
    }
    friend bool operator == (Point x,Point y)
    {
        return ((x.x==y.x) && (x.y==y.y));
    }
}; 
Point p0;
ll dist(Point p1, Point p2) 
{
    return (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);
}

ll direction(Point p1, Point p2, Point p3) 
{ 
    ll val = (p2.y - p1.y) * (p3.x - p2.x) - 
              (p2.x - p1.x) * (p3.y - p2.y); 
    return val;
} 

bool comp(Point p1 , Point p2)
{
        ll dir = direction(p0,p1,p2);
        if(!dir)
        {
            return dist(p0,p1) < dist(p0,p2);
        }
        return dir<0;
}  
// = 0 - colinear
// > 0 - right
// < 0 - left


vector<Point> ConvexHull(vector<Point> p)
{
    ll i,j,k,n=p.size();
    ll y_mn = p[0].y;
    ll mn = 0;
    for(i=1;i<n;i++)
    {
            ll y = p[i].y;
            if(y < y_mn || (y_mn == y and p[i].x < p[mn].x))
            {
                y_mn = p[i].y;
                mn = i;
            }
    }
    swap(p[0],p[mn]);
    p0 = p[0];
    sort(p.begin(),p.end(),comp);

    ll m = 1;
    for(ll i=1;i<n;i++)
    {
            while(i+1<n and direction(p0,p[i],p[i+1]) == 0)
                    i++;
            p[m++] = p[i];
    }
    vector<Point> st;
    st.pb(p[0]);
    st.pb(p[1]);
    st.pb(p[2]);
    for(i=3;i<m;i++)
    {
        ll len=st.size();
        while(st.size()>=2 && direction(st[len - 2], st[len - 1], p[i]) >= 0)
        {
            st.pop_back();
            len--;
        }
        st.push_back(p[i]);
    }
    return st;

}
// vector<Point> p;
//ConvexHull(p)
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>convex_hull</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
